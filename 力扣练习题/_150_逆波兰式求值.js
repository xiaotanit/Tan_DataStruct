/**
 * 根据逆波兰表示法（后缀表示法），求表达式的值。
 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
 说明：
 整数除法只保留整数部分。
 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

 示例 1：
 输入: ["2", "1", "+", "3", "*"]
 输出: 9
 解释: ((2 + 1) * 3) = 9

 示例 2：
 输入: ["4", "13", "5", "/", "+"]
 输出: 6
 解释: (4 + (13 / 5)) = 6

 示例 3：
 输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
 输出: 22
 解释:
 ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
 = ((10 * (6 / (12 * -11))) + 17) + 5
 = ((10 * (6 / -132)) + 17) + 5
 = ((10 * 0) + 17) + 5
 = (0 + 17) + 5
 = 17 + 5
 = 22
 */

/**
 * @param {string[]} tokens
 * @return {number}
 * 执行用时 :92 ms, 在所有 JavaScript 提交中击败了91.72%的用户
 * 内存消耗 :37.2 MB, 在所有 JavaScript 提交中击败了40.48%的用户
 */
var evalRPN = function(tokens) {
    //用栈来实现，碰到数字入栈，碰到运算符号，出栈计算
    let arr = [], str = null;
    for (let i =0; i < tokens.length; i++){
        str = tokens[i];

        if (str == "+" || str == "-" || str == "*" || str == "/"){
            let num2 = parseInt(arr.pop()), num1 = parseInt(arr.pop()), res = 0;
            if (str == "+"){
                res = num1 + num2;
            }
            else if(str == "-"){
                res = num1 - num2;
            }
            else if(str == "*"){
                res = num1 * num2;
            }
            else if(str == "/"){
                res = parseInt(num1 / num2);
            }
            arr.push(res);
        }
        else{
            arr.push(str);
        }
    }
    return arr.length ? arr.pop() : 0;
};




/**
 * 波兰表示法（前缀表示法），即运算符号在前面，运算数字在后面
 * 示例 1：
 输入: ["*", "+", "2", "1", "3"]
 输出: 9
 解释: ((2 + 1) * 3) = 9

 示例 2：
 输入: ["+", "4", "/", "13", "5"]
 输出: 6
 解释: (4 + (13 / 5)) = 6

 示例 3：
 输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
 ["+","+", "*", 10, "/", 6, "*", "+", "9", "3", "-11","17", "5"]
 输出: 22
 解释:
 ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
 = ((10 * (6 / (12 * -11))) + 17) + 5
 = ((10 * (6 / -132)) + 17) + 5
 = ((10 * 0) + 17) + 5
 = (0 + 17) + 5
 = 17 + 5
 = 22

 前缀表示法求值，就是把输入的数组逆序入栈，也相当于是逆波兰法
 */